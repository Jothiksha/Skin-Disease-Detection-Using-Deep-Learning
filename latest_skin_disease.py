# -*- coding: utf-8 -*-
"""latest_skin disease.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1o9DldVN_6_niy6ciGoTKqAWdnXUTZxB8
"""

from google.colab import files
import os
import zipfile

files.upload()
!mkdir ~/.kaggle
!cp kaggle.json ~/.kaggle
!chmod 600 /root/.kaggle/kaggle.json
import kaggle
print("Imported kaggle API successfully !")

print("Downloading dataset : ")
!kaggle datasets download subirbiswas19/skin-disease-dataset
print("Downloaded Successfully!")

zip_ref = zipfile.ZipFile('/content/skin-disease-dataset.zip', 'r')
zip_ref.extractall()
zip_ref.close()

import numpy as np
import pandas as pd
import seaborn as sns

import tensorflow as tf
import keras
from keras.models import Sequential
from keras.layers import Conv2D,MaxPooling2D,Dense,Flatten,Dropout
import matplotlib.pyplot as plt
from tensorflow.keras.layers import BatchNormalization
# Instead of 'from keras_preprocessing import image', use the following:
from tensorflow.keras.preprocessing import image
from tensorflow.keras.preprocessing.image import ImageDataGenerator

train_dir="/content/skin-disease-datasaet/train_set"
generator = ImageDataGenerator()
train_ds = generator.flow_from_directory(train_dir,target_size=(150, 150),batch_size=64)
classes = list(train_ds.class_indices.keys())

# List all class folders
dataset_path="/content/skin-disease-datasaet/train_set"
classes = os.listdir(dataset_path)
print("Classes:", classes)

# Count images per class
class_counts = {cls: len(os.listdir(os.path.join(dataset_path, cls))) for cls in classes}
df_counts = pd.DataFrame(list(class_counts.items()), columns=["Class", "Count"])

# Plot class distribution
plt.figure(figsize=(10, 5))
sns.barplot(x=df_counts["Class"], y=df_counts["Count"], palette="viridis")
plt.xticks(rotation=45)
plt.title("Class Distribution")
plt.show()

import cv2
from PIL import Image
from tensorflow.keras import models, layers, optimizers, losses, metrics
from tensorflow.keras.preprocessing.image import ImageDataGenerator
import tensorflow as tf
import os
from pathlib import Path
import random

# visualize some images from our training set.
NUM_IMAGES = 3

fig, ax = plt.subplots(nrows = len(classes), ncols = NUM_IMAGES, figsize = (10, 20))

p = 0

for c in classes:
    img_path_class = list(Path(os.path.join(train_dir,c)).glob("*.jpg"))
    img_selected = random.choices(img_path_class, k = NUM_IMAGES)
    for i,j in enumerate(img_selected):
        img_bgr = cv2.imread(str(j))
        img_rgb = cv2.cvtColor(img_bgr, cv2.COLOR_BGR2RGB)
        ax[p,i].imshow(img_rgb)
        ax[p,i].set_title(f"Class: {c}\nShape: {img_rgb.shape}")
        ax[p,i].axis('off')

    p += 1

fig.tight_layout()
fig.show()

def preprocess_image(image_path, img_size=128, grayscale=False):
    img = cv2.imread(image_path)

    if grayscale:
        img = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)  # Convert to grayscale
        img = np.expand_dims(img, axis=-1)  # Add channel dimension for CNNs

    img = cv2.resize(img, (img_size, img_size))  # Resize image
    img = img / 255.0  # Normalize (scale values between 0 and 1)
    return img

# Example usage
img_path = os.path.join(dataset_path, classes[0], os.listdir(os.path.join(dataset_path, classes[0]))[0])
preprocessed_img = preprocess_image(img_path, grayscale=True)

plt.imshow(preprocessed_img.squeeze(), cmap="gray")
plt.axis("off")
plt.title("Preprocessed Image")
plt.show()

# Read image in grayscale
image_path="/content/skin-disease-datasaet/test_set/BA-impetigo/31_BA-impetigo (26).jpg"
image = cv2.imread(image_path, cv2.IMREAD_GRAYSCALE)

# Convert image to NumPy array
pixel_values = np.array(image)

# Print shape of the image
print(f"Image Shape: {pixel_values.shape}")  # Example: (128, 128) for grayscale

# Display raw pixel values
print("Pixel Intensities:")
print(pixel_values)
plt.figure(figsize=(8,6))
plt.imshow(pixel_values, cmap="gray")
plt.colorbar(label="Pixel Intensity")
plt.title("Pixel Intensity Heatmap")
plt.show()

x, y = 50, 50  # Example coordinates

# Get pixel intensity at (x, y)
pixel_intensity = pixel_values[y, x]
print(f"Pixel Intensity at ({x}, {y}): {pixel_intensity}")

# Load image in color mode
image_rgb = cv2.imread(image_path)

# Convert to RGB format
image_rgb = cv2.cvtColor(image_rgb, cv2.COLOR_BGR2RGB)

# Extract pixel at (x, y)
pixel_rgb = image_rgb[y, x]  # [R, G, B]
print(f"RGB Pixel at ({x}, {y}): {pixel_rgb}")

img = cv2.imread('/content/skin-disease-datasaet/test_set/BA-impetigo/31_BA-impetigo (26).jpg')
plt.imshow(img)
plt.title('athlete-foot')

plt.figure(figsize = (15, 15))
b, g, r = cv2.split(img)

plt.subplot(1,3,1)
plt.imshow(b)
plt.title("Blue Channel")

plt.subplot(1,3,2)
plt.imshow(g)
plt.title("Green Channel")

plt.subplot(1,3,3)
plt.imshow(r)
plt.title("Red Channel")

canny = cv2.Canny(img, 50, 170)
plt.imshow(canny)

model = Sequential()
model.add(Conv2D(32, kernel_size = (3, 3), activation='relu', input_shape=(150,150,3)))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(BatchNormalization())
model.add(Conv2D(64, kernel_size=(3,3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(BatchNormalization())
model.add(Conv2D(64, kernel_size=(3,3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(BatchNormalization())
model.add(Conv2D(96, kernel_size=(3,3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(BatchNormalization())
model.add(Conv2D(32, kernel_size=(3,3), activation='relu'))
model.add(MaxPooling2D(pool_size=(2,2)))
model.add(BatchNormalization())
model.add(Dropout(0.2))
model.add(Flatten())
model.add(Dense(128, activation='relu'))
#model.add(Dropout(0.3))
model.add(Dense(len(classes),activation='softmax'))

model.compile(
    loss = 'categorical_crossentropy',
    optimizer = 'adam',
    metrics = ["accuracy"])
model.summary()

history = model.fit(train_ds,epochs= 15, batch_size=64)

import matplotlib.pyplot as plt
plt.plot(history.history['accuracy'])
plt.plot(history.history['loss'])
plt.xlabel('Time')
plt.legend(['accuracy', 'loss'])
plt.show()

import warnings
warnings.filterwarnings('ignore')
# serialize model to JSON
model_json = model.to_json()
with open("model.json", "w") as json_file:
    json_file.write(model_json)

model.save('skindisease.h5')

from tensorflow.keras.models import load_model # load saved model
model = load_model('skindisease.h5')

def predict_image(img_path):
    # Load and preprocess the image
    img = load_img(img_path, target_size=(192, 108))
    plt.imshow(img)
    plt.show()
    img_array = img_to_array(img)
    img_array = img_array / 255.0  # Normalize
    img_array = np.expand_dims(img_array, axis=0)  # Expand dimensions for model input shape
    # Make a prediction
    prediction = model.predict([img_array, img_array, img_array])  # As the model has 3 inputs
    predicted_class = np.argmax(predictions, axis=1)
    # Map the predicted class index to the respective class
    class_map = ['BA- cellulitis','BA-impetigo','FU-athlete-foot','FU-nail-fungus','FU-ringworm','PA-cutaneous-larva-migrans','VI-chickenpox','VI-shingles']
    return class_map[predicted_class[0]]

# Test with a set of provided images
image_directory = "/content/skin-disease-datasaet/test_set/"
image_files = os.listdir(image_directory)

from tensorflow.keras.utils import load_img
from tensorflow.keras.utils import img_to_array
import matplotlib.pyplot as plt
import numpy as np

def predict_image(img_path):
    # Load and preprocess the image
    img = load_img(img_path, target_size=(192, 108)) # load_img is now defined
    plt.imshow(img)
    plt.show()
    img_array = img_to_array(img) # img_to_array is now defined
    img_array = img_array / 255.0  # Normalize
    img_array = np.expand_dims(img_array, axis=0)  # Expand dimensions for model input shape
    # Make a prediction
    prediction = model.predict([img_array, img_array, img_array])  # As the model has 3 inputs
    # Assuming 'predictions' is the correct variable
    predicted_class = np.argmax(prediction, axis=1) # Now predicting on the correct data
    # Map the predicted class index to the respective class
    class_map = ['BA- cellulitis','BA-impetigo','FU-athlete-foot','FU-nail-fungus','FU-ringworm','PA-cutaneous-larva-migrans','VI-chickenpox','VI-shingles']
    return class_map[predicted_class[0]]
    print("Actual: "+(image_path.split("/")[-1]).split("_")[0])
    print("Predicted: "+classes[np.argmax(prediction)])
    predicted_class = classes[np.argmax(prediction)]
    print(np.argmax(prediction))
    print(predict)

import json

# Mock database for skin diseases
data  = {
    "BA-cellulitis": {
        "causes": [
            "Bacterial infection (commonly Streptococcus or Staphylococcus)",
            "Injuries that break the skin, such as cuts or scrapes",
            "Weakened immune system"
        ],
        "symptoms": [
            "Red, swollen, and tender skin",
            "Warmth in the affected area",
            "Fever and chills in severe cases"
        ],
        "remedies": [
            "Antibiotic treatment (oral or intravenous)",
            "Keep the affected area elevated",
            "Consult a doctor for proper care"
        ]
    },
    "BA-impetigo": {
        "causes": [
            "Bacterial infection (Staphylococcus aureus or Streptococcus pyogenes)",
            "Direct contact with infected skin",
            "Poor hygiene"
        ],
        "symptoms": [
            "Red sores around the nose and mouth",
            "Honey-colored crusts after sores burst",
            "Itching and irritation"
        ],
        "remedies": [
            "Topical or oral antibiotics",
            "Gently clean affected areas with soap and water",
            "Avoid sharing personal items like towels"
        ]
    },
    "FU-athlete-foot": {
        "causes": [
            "Fungal infection (Trichophyton species)",
            "Walking barefoot in damp, communal areas like pools or gyms",
            "Wearing tight, damp footwear"
        ],
        "symptoms": [
            "Itching, burning, or stinging between toes",
            "Scaly, cracked, or peeling skin",
            "Blisters or sores"
        ],
        "remedies": [
            "Over-the-counter antifungal creams or sprays",
            "Keep feet clean and dry",
            "Wear breathable footwear and avoid sharing shoes"
        ]
    },
    "FU-nail-fungus": {
        "causes": [
            "Fungal infection (Dermatophytes, yeasts, or molds)",
            "Prolonged exposure to moist environments",
            "Weakened immune system"
        ],
        "symptoms": [
            "Thickened, brittle, or discolored nails",
            "Nails may crumble or separate from the nail bed",
            "Unpleasant odor"
        ],
        "remedies": [
            "Antifungal nail treatments (topical or oral)",
            "Keep nails trimmed and clean",
            "Consult a dermatologist for advanced cases"
        ]
    },
    "FU-ringworm": {
        "causes": [
            "Fungal infection (Dermatophytes)",
            "Direct contact with infected individuals or animals",
            "Sharing contaminated items like towels or clothing"
        ],
        "symptoms": [
            "Circular, red, scaly patches",
            "Itchy skin",
            "Raised edges around the affected area"
        ],
        "remedies": [
            "Topical antifungal creams or ointments",
            "Avoid scratching to prevent spreading",
            "Clean affected areas regularly"
        ]
    },
    "PA-cutaneous-larva-migrans": {
        "causes": [
            "Larval stage of hookworms penetrating the skin",
            "Walking barefoot on contaminated soil or sand",
            "Contact with infected animal feces"
        ],
"symptoms": [
            "Winding, snake-like red lesions",
            "Itching and irritation",
            "Mild swelling in affected areas"
        ],
        "remedies": [
            "Antiparasitic medications (e.g., albendazole, ivermectin)",
            "Topical corticosteroids to relieve itching",
            "Avoid walking barefoot in areas prone to contamination"
        ]
    },
    "VI-chickenpox": {
        "causes": [
            "Varicella-zoster virus (VZV)",
            "Highly contagious through respiratory droplets or direct contact",
            "Weakened immune system increases risk"
        ],
        "symptoms": [
            "Itchy rash with fluid-filled blisters",
            "Fever and fatigue",
            "Headache and loss of appetite"
        ],
        "remedies": [
            "Calamine lotion to soothe itching",
            "Antiviral medications in severe cases",
            "Avoid scratching to prevent scarring"
        ]
    },
    "VI-shingles": {
        "causes": [
            "Reactivation of varicella-zoster virus (VZV)",
            "Stress, aging, or weakened immune system",
            "Previous history of chickenpox"
        ],
        "symptoms": [
            "Painful rash with blisters",
            "Burning, tingling, or numbness",
            "Fever and headache"
        ],
        "remedies": [
            "Antiviral medications (acyclovir, valacyclovir)",
            "Pain relievers for discomfort",
            "Cool compresses on the rash"
        ]
    }
}
json_data = json.dumps(data, indent=4)  # Pretty-printed JSON string
print(json_data)

# Save JSON to a file in Google Colab
with open("skin_diseases.json", "w") as json_file:
    json.dump(data, json_file, indent=4)
print("JSON file saved!")

# Load JSON data from a file
with open("skin_diseases.json", "r") as json_file:
    loaded_data = json.load(json_file)

print("Loaded JSON data:")
print(loaded_data)

print(loaded_data.keys())  # Check all available keys

disease= predict_image("/content/skin-disease-datasaet/test_set/PA-cutaneous-larva-migrans/111_PA-cutaneous-larva-migrans (19).jpg")
causes = loaded_data[disease]["causes"]
symptoms = loaded_data[disease]["symptoms"]
remedies = loaded_data[disease]["remedies"]
print(f"Causes of {disease}: {causes}")
print(f"Symptoms of {disease}: {symptoms}")
print(f"Remedies of {disease}: {remedies}")

disease=predict_image("/content/skin-disease-datasaet/test_set/FU-ringworm/94_FU-ringworm (48).jpg")
# Strip extra spaces to ensure key matching
disease = disease.strip()
print(f"Predicted Disease: '{disease}'")
# Attempt to get data for the disease, if not found provide a default message
disease_data = loaded_data.get(disease, {})
causes = disease_data.get("causes")
symptoms = disease_data.get("symptoms")
remedies = disease_data.get("remedies")
print(f"Causes of {disease}: {causes}")
print(f"Symptoms of {disease}: {symptoms}")
print(f"Remedies of {disease}: {remedies}")

disease=predict_image("/content/skin-disease-datasaet/test_set/VI-chickenpox/122_VI-chickenpox (7).jpg")
# Strip extra spaces to ensure key matching
disease = disease.strip()
print(f"Predicted Disease: '{disease}'")
# Attempt to get data for the disease, if not found provide a default message
disease_data = loaded_data.get(disease, {})
causes = disease_data.get("causes")
symptoms = disease_data.get("symptoms")
remedies = disease_data.get("remedies")
print(f"Causes of {disease}: {causes}")
print(f"Symptoms of {disease}: {symptoms}")
print(f"Remedies of {disease}: {remedies}")

from google.colab import drive
drive.mount('/content/drive')